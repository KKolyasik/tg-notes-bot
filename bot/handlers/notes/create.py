from datetime import datetime

from aiogram import F, Router
from aiogram.filters import Command, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession

from bot.constants import BTN_CREATE, ISO_REGEX
from bot.core.db import SessionFactory
from bot.keyboards.inline_kbs import get_timesnap, skip_body_note_kb
from bot.middlewares.db import DbSessionMiddleware
from bot.services.notes import save_note_from_state

router = Router(name="–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏")
router.message.middleware(DbSessionMiddleware(SessionFactory))
router.callback_query.middleware(DbSessionMiddleware(SessionFactory))


class NewNote(StatesGroup):
    title: str = State()
    body: str = State()
    remind_at: datetime = State()


@router.message(or_f(Command("new"), F.text == BTN_CREATE))
async def new_note(message: Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏."""
    text = (
        "<b><i><u>‚úçÔ∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏</u></i></b>\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –∏ —è—Å–Ω–æ!"
    )
    await message.answer(text)
    await state.set_state(NewNote.title)


@router.message(F.text & ~F.text.startswith("/"), NewNote.title)
async def got_title(message: Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–∞–º–µ—Ç–∫–∏."""
    await state.update_data(title=message.text.strip())
    await state.set_state(NewNote.body)
    text = (
        "<b><i><u>üìì –¢–µ–ª–æ –∑–∞–º–µ—Ç–∫–∏</u></i></b>\n"
        "üìÑ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"
        "(–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç —à–∞–≥, –µ—Å–ª–∏ –∑–∞–º–µ—Ç–∫–∞ –∫–æ—Ä–æ—Ç–∫–∞—è)"
    )
    await message.answer(
        text,
        reply_markup=skip_body_note_kb(),
    )


@router.callback_query(NewNote.body, F.data == "decline")
async def cancel_note(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await call.message.answer("–û–∫–µ–π, —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–º–µ–Ω–∏–ª ‚úÖ")


@router.callback_query(NewNote.body, F.data == "note:skip_body")
async def create_note_without_body(
    call: CallbackQuery,
    state: FSMContext,
):
    """–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±–µ–∑ —Ç–µ–ª–∞."""
    await state.update_data(body=None)
    await call.answer("–î–∞–ª–µ–µ")
    text = (
        "<b><i><u>üìç –í—Ä–µ–º—è –∑–∞–º–µ—Ç–∫–∏</u></i></b>\n"
        "‚è∞ –£–∫–∞–∂–∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å —Ç–µ–±–µ –æ–± —ç—Ç–æ–π –∑–∞–º–µ—Ç–∫–µ"
    )
    msg = await call.message.answer(text, reply_markup=get_timesnap())
    await state.update_data(
        picker_msg_id=msg.message_id,
        picker_chat_id=msg.chat.id,
    )
    await state.set_state(NewNote.remind_at)


@router.message(F.text & ~F.text.startswith("/"), NewNote.body)
async def got_body(message: Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Å —Ç–µ–ª–æ–º."""
    await state.update_data(body=message.text.strip())
    text = (
        "<b><i><u>üìç –í—Ä–µ–º—è –∑–∞–º–µ—Ç–∫–∏</u></i></b>\n"
        "‚è∞ –£–∫–∞–∂–∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å —Ç–µ–±–µ –æ–± —ç—Ç–æ–π –∑–∞–º–µ—Ç–∫–µ"
    )
    msg = await message.answer(text, reply_markup=get_timesnap())

    await state.update_data(
        picker_msg_id=msg.message_id,
        picker_chat_id=msg.chat.id,
    )
    await state.set_state(NewNote.remind_at)


@router.message(F.text.regexp(ISO_REGEX), NewNote.remind_at)
async def handle_webapp_data(
    message: Message, state: FSMContext, session: AsyncSession,
):
    await state.update_data(remind_at=message.text)
    await save_note_from_state(
        state,
        session,
        message.from_user.id,
        message,
    )
